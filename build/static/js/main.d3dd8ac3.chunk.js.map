{"version":3,"sources":["logo.svg","Clock.js","Tagline.js","Social.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Clock","props","state","time","Date","toLocaleString","this","intervalID","setInterval","tick","clearInterval","setState","className","React","Component","Tagline","Social","class","href","Footer","App","salute","name","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sJAAAA,EAAOC,QAAU,IAA0B,kC,qICyB5BC,G,wBAtBb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,MAAM,IAAIC,MAAOC,kBAHF,E,iFAME,IAAD,OAClBC,KAAKC,WAAaC,aAAY,kBAAM,EAAKC,SAAQ,O,6CAGjDC,cAAcJ,KAAKC,c,6BAGnBD,KAAKK,SAAS,CACZR,MAAM,IAAIC,MAAOC,qB,+BAInB,OAAO,uBAAGO,UAAU,aAAaN,KAAKJ,MAAMC,U,GAnB5BU,IAAMC,YCYXC,E,iLARP,OAEC,uBAAGH,UAAU,WAAb,oE,GAJaC,IAAMC,WC4BbE,E,iLA5BP,OACE,yBAAKC,MAAM,gBACT,uBAAGC,KAAK,iCACN,uBAAGD,MAAM,mBAEX,uBAAIC,KAAK,qCACP,uBAAGD,MAAM,oBAEX,uBAAIC,KAAK,4BACP,uBAAGD,MAAM,gBAEX,uBAEEC,KAAK,+CAEL,uBAAGD,MAAM,qBAEX,uBAAIC,KAAK,uCACP,uBAAGD,MAAM,mBAEX,uBAAIC,KAAK,iCACP,uBAAGD,MAAM,yB,GAvBFJ,IAAMC,WCUZK,E,iLARP,OACE,6CACmB,uCACjB,uBAAGD,KAAK,iCAAR,mB,GALSL,IAAMC,WC2BZM,E,iLAjBX,OACE,yBAAKR,UAAU,OACb,yBAAKA,UAAU,cAEb,uBAAGA,UAAU,SAAb,UACUN,KAAKL,MAAMoB,OADrB,IAC8Bf,KAAKL,MAAMqB,KADzC,KAGA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,Y,GAZQT,IAAMC,WCEJS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,CAAKR,OAFR,MAEwBC,KAH1B,UAG0CQ,SAASC,eAAe,SD2HvE,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d3dd8ac3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\n\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      time: new Date().toLocaleString()\n    };\n  }\n  componentDidMount() {\n    this.intervalID = setInterval(() => this.tick(), 1000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.intervalID);\n  }\n  tick() {\n    this.setState({\n      time: new Date().toLocaleString()\n    });\n  }\n  render() {\n    return <p className=\"App-clock\">{this.state.time}</p>;\n  }\n}\n\nexport default Clock;\n","import React from \"react\";\n\n//let tagline = \"Frontend Web Applications Developer | Open-Source Enthusiast \"; \n\nclass Tagline extends React.Component{\n    render(){\n        return (\n        //   <p> {this.props.tagline}</p>\n         <p className=\"tagline\">Frontend Web Applications Developer | Open-Source Enthusiast</p>\n        );\n    }\n}\n\n\nexport default Tagline;","import React from \"react\";\n\nclass Social extends React.Component{\n    render(){\n        return (\n          <div class=\"icons-social\">\n            <a href=\"https://github.com/steve-ryan\">\n              <i class=\"fab fa-github\"></i>\n            </a>\n            <a  href=\"https://twitter.com/Stevewachirah\">\n              <i class=\"fab fa-twitter\"></i>\n            </a>\n            <a  href=\"https://dev.to/steveryan\">\n              <i class=\"fab fa-dev\"></i>\n            </a>\n            <a\n              \n              href=\"https://www.linkedin.com/in/steve-wachirah/\"\n            >\n              <i class=\"fab fa-linkedin\"></i>\n            </a>\n            <a  href=\"https://medium.com/@steveryan_50665\">\n              <i class=\"fab fa-medium\"></i>\n            </a>\n            <a  href=\"https://codepen.io/Steve_ryan\">\n              <i class=\"fab fa-codepen\"></i>\n            </a>\n          </div>\n        );\n    }\n}\n\nexport default Social;","import React from \"react\";\n\nclass Footer extends React.Component{\n    render(){\n        return (\n          <p>\n            Copyright &copy; <span>2020 </span>\n            <a href=\"https://github.com/steve-ryan\">Steve Ryan</a>\n          </p>\n        );\n    }\n}\nexport default Footer;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Clock from './Clock';\nimport Tagline from './Tagline';\nimport Social from './Social';\nimport Footer from './Footer';\n\n// let time = new Date().toLocaleString();\n\nclass App extends React.Component{\n render(){\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n          <p className=\"intro\">\n            Hello, {this.props.salute} {this.props.name}!\n          </p>\n          <Tagline></Tagline>\n          <Social></Social>\n          <Clock></Clock>\n          <Footer></Footer>\n        </div>\n      </div>\n    );\n }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nlet name = \"Steve\";\nlet salute = \"I'm\";\n//let tagline = \"Frontend Web Applications Developer | Open-Source Enthusiast \";\nReactDOM.render(<App salute={salute} name={name} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}